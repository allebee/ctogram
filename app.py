import streamlit as st
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
import os
import json

# Set page config
st.set_page_config(page_title="Auto Repair Request Classifier", layout="wide")

# Define the repair categories from the screenshots
REPAIR_CATEGORIES = {
    "–ö—É–∑–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –¥–µ—Ç–µ–π–ª–∏–Ω–≥": ["–∫—É–∑–æ–≤", "–∫—Ä—ã–ª–æ", "–±–∞–º–ø–µ—Ä", "–ø–æ–∫—Ä–∞—Å–∫–∞", "–≤–º—è—Ç–∏–Ω–∞", "—Ü–∞—Ä–∞–ø–∏–Ω–∞", "–ø–æ–ª–∏—Ä–æ–≤–∫–∞", "–¥–µ—Ç–µ–π–ª–∏–Ω–≥"],
    "–†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏ –Ω–∞–≤–µ—Å–Ω–æ–≥–æ": ["–¥–≤–∏–≥–∞—Ç–µ–ª—å", "–º–æ—Ç–æ—Ä", "—Ç—Ä–æ–∏—Ç", "—Å—Ç—É–∫", "–ø–µ—Ä–µ–≥—Ä–µ–≤", "–º–∞—Å–ª–æ", "—Å–≤–µ—á–∏", "—Ü–∏–ª–∏–Ω–¥—Ä", "–ø–æ—Ä—à–µ–Ω—å", "—Ä–µ–º–µ–Ω—å –≥—Ä–º", "–Ω–∞–≤–µ—Å–Ω–æ–≥–æ"],
    "–ê–≤—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏–∫–∏/–∫–æ–º–ø—å—é—Ç.–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞": ["—ç–ª–µ–∫—Ç—Ä–∏–∫–∞", "–ø—Ä–æ–≤–æ–¥–∫–∞", "–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä", "—Ñ–∞—Ä—ã", "–ª–∞–º–ø–æ—á–∫–∏", "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "—Å—Ç–∞—Ä—Ç–µ—Ä", "–±–æ—Ä—Ç–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"],
    "–†–µ–º–æ–Ω—Ç —Ö–æ–¥–æ–≤–æ–π/–ø–æ–¥–≤–µ—Å–∫–∏/–≥–µ–æ–º–µ—Ç—Ä–∏—è": ["—Ö–æ–¥–æ–≤–∞—è", "–ø–æ–¥–≤–µ—Å–∫–∞", "–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã", "—Ä–µ—Å—Å–æ—Ä—ã", "—Å—Ç–æ–π–∫–∏", "—Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä", "—Å—Ç—É–∫ –ø—Ä–∏ –µ–∑–¥–µ", "–≤–∏–±—Ä–∞—Ü–∏—è", "–≥–µ–æ–º–µ—Ç—Ä–∏—è"],
    "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è –ê–ö–ü–ü/–ú–ö–ü–ü/–í–∞—Ä–∏–∞—Ç–æ—Ä": ["–∫–æ—Ä–æ–±–∫–∞", "—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è", "—Å—Ü–µ–ø–ª–µ–Ω–∏–µ", "–∞–∫–ø–ø", "–º–∫–ø–ø", "–≤–∞—Ä–∏–∞—Ç–æ—Ä", "–ø–µ—Ä–µ–¥–∞—á–∏", "–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ"],
    "–†–µ–º–æ–Ω—Ç –ø–µ—á–∫–∞/–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä/—Ä–∞–¥–∏–∞—Ç–æ—Ä": ["–ø–µ—á–∫–∞", "–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä", "—Ä–∞–¥–∏–∞—Ç–æ—Ä", "–æ—Ç–æ–ø–∏—Ç–µ–ª—å", "–∫–ª–∏–º–∞—Ç"],
    "–†–µ–º–æ–Ω—Ç —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã": ["—Ç–æ–ø–ª–∏–≤–æ", "–±–µ–Ω–∑–∏–Ω", "–∏–Ω–∂–µ–∫—Ç–æ—Ä", "–∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä", "–±–µ–Ω–∑–æ–Ω–∞—Å–æ—Å", "—Ñ–æ—Ä—Å—É–Ω–∫–∏"],
    "–†—É–ª–µ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∑–º": ["—Ä—É–ª—å", "—Ä—É–ª–µ–≤–∞—è —Ä–µ–π–∫–∞", "–≥—É—Ä", "–≥–∏–¥—Ä–æ—É—Å–∏–ª–∏—Ç–µ–ª—å"],
    "–°–≤–∞—Ä–æ—á–Ω—ã–µ/—Ç–æ–∫–∞—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã": ["—Å–≤–∞—Ä–∫–∞", "—Å–≤–∞—Ä–æ—á–Ω—ã–µ", "—Ç–æ–∫–∞—Ä–Ω—ã–µ"],
    "–†–µ–º–æ–Ω—Ç —Å—Ç–µ–∫–æ–ª": ["—Å—Ç–µ–∫–ª–æ", "–ª–æ–±–æ–≤–æ–µ", "–∑–∞–¥–Ω–µ–µ", "–±–æ–∫–æ–≤–æ–µ", "—Ç—Ä–µ—â–∏–Ω–∞"],
    "–í—ã—Ö–ª–æ–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞/–†–µ–º–æ–Ω—Ç —Ç—É—Ä–±–∏–Ω": ["–≤—ã—Ö–ª–æ–ø", "–≥–ª—É—à–∏—Ç–µ–ª—å", "–∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä", "—Ç—É—Ä–±–∏–Ω–∞"],
    "–ß–∏–ø —Ç—é–Ω–∏–Ω–≥": ["—á–∏–ø", "—Ç—é–Ω–∏–Ω–≥", "–ø—Ä–æ—à–∏–≤–∫–∞", "–º–æ—â–Ω–æ—Å—Ç—å"],
    "–†–µ–º–æ–Ω—Ç —Å—Ç–∞—Ä—Ç–µ—Ä–∞ / –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞": ["—Å—Ç–∞—Ä—Ç–µ—Ä", "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"],
    "–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π": ["–º–∞—Å–ª–æ", "–∞–Ω—Ç–∏—Ñ—Ä–∏–∑", "—Ç–æ—Ä–º–æ–∑–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å", "–∂–∏–¥–∫–æ—Å—Ç—å –≥—É—Ä", "–∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞", "—Ñ–∏–ª—å—Ç—Ä"],
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–∞–∑–∞ –Ω–∞ –∞–≤—Ç–æ": ["–≥–∞–∑", "–≥–±–æ", "–≥–∞–∑–æ–±–∞–ª–ª–æ–Ω–Ω–æ–µ", "–º–µ—Ç–∞–Ω", "–ø—Ä–æ–ø–∞–Ω"]
}

# Setup the LLM classification system
def setup_langchain():
    """Set up the LangChain components for classification."""
    
    # Create the prompt template - fixed to avoid StructuredOutputParser error
    template = """
    –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –∞–≤—Ç–æ–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –¢–≤–æ—è —Ä–∞–±–æ—Ç–∞ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞—è–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞.
    
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–º–æ–Ω—Ç–∞:
    {categories}
    
    –ó–∞—è–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:
    {request}
    
    –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–º–æ–Ω—Ç–∞. –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞ –∏–ª–∏ –º–æ–∂–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –≤—ã–±–µ—Ä–∏ —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é.
    
    –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON:
    {{
        "category": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ",
        "confidence": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1,
        "explanation": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    }}
    """
    
    prompt = ChatPromptTemplate.from_template(template)
    
    # Use the OpenAI model with enhanced temperature for better Russian language handling
    llm = ChatOpenAI(temperature=0.1, model_name="gpt-3.5-turbo-16k")
    
    # Use a simple string output parser instead of the StructuredOutputParser 
    # that was causing the error
    output_parser = StrOutputParser()
    
    return llm, prompt, output_parser

def process_llm_response(response_text):
    """Process the LLM response and extract the classification data."""
    try:
        # Try to parse the JSON response
        result = json.loads(response_text)
        return result
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return {"category": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "confidence": 0, "explanation": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç"}

def classify_repair_request(request, llm, prompt, output_parser):
    """Classify the repair request using LangChain."""
    
    # Format the categories for the prompt - sorted by name for better readability
    categories_str = "\n".join([f"- {cat}" for cat in sorted(REPAIR_CATEGORIES.keys())])
    
    # Format the prompt
    formatted_prompt = prompt.format(
        categories=categories_str,
        request=request
    )
    
    # Get the response from the LLM
    response = llm.invoke(formatted_prompt)
    
    # Parse the response with the string output parser
    raw_response = output_parser.invoke(response)
    
    # Process the raw string response into structured data
    result = process_llm_response(raw_response)
    
    return result

def get_api_key():
    """Get the OpenAI API key from the environment or from the user."""
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        api_key = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á OpenAI", type="password")
    return api_key

def main():
    st.title("üöó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    
    # Sidebar for API key
    api_key = get_api_key()
    if not api_key:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á OpenAI –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é.")
        return
    
    os.environ["OPENAI_API_KEY"] = api_key
    
    # Set up LangChain - with error handling
    try:
        llm, prompt, output_parser = setup_langchain()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LangChain: {e}")
        return
    
    # Car selection - using the car from the screenshots
    car_models = ["Dodge", "Toyota", "Honda", "Ford", "Chevrolet", "Nissan", "Volkswagen", "Mazda", "–î—Ä—É–≥–æ–µ"]
    selected_car = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è", car_models)
    
    # Input form
    with st.form("repair_request_form"):
        if selected_car == "–î—Ä—É–≥–æ–µ":
            user_car = st.text_input("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        else:
            user_car = selected_car
        
        user_request = st.text_area("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º", height=150,
                                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–°—Ç—É–∫ –≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ –ø—Ä–∏ —Ä–∞–∑–≥–æ–Ω–µ' –∏–ª–∏ '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä'")
        
        submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
    
    # Process the request if submitted
    if submitted and user_request:
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É..."):
            try:
                # Classify the request
                result = classify_repair_request(user_request, llm, prompt, output_parser)
                
                # Display the results
                st.success(f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è {user_car} –±—ã–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞!")
                
                # Show the classification
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–∞:** {result['category']}")
                    st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {result['confidence']*100:.1f}%")
                    st.write(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {result['explanation']}")
                
                with col2:
                    st.subheader("–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏")
                    st.write(f"**–ê–≤—Ç–æ–º–æ–±–∏–ª—å:** {user_car}")
                    st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:** {user_request}")
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    # Display some examples
    with st.expander("–ü—Ä–∏–º–µ—Ä—ã –∑–∞—è–≤–æ–∫"):
        st.markdown("""
        ### –ü—Ä–∏–º–µ—Ä—ã –∑–∞—è–≤–æ–∫ –∏ –∏—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π:
        
        1. **–ö—É–∑–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –¥–µ—Ç–µ–π–ª–∏–Ω–≥**
           - "–£ –º–µ–Ω—è –≤–º—è—Ç–∏–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–º –∫—Ä—ã–ª–µ –ø–æ—Å–ª–µ –ø–∞—Ä–∫–æ–≤–∫–∏"
           - "–ù—É–∂–Ω–∞ –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –∏ –¥–µ—Ç–µ–π–ª–∏–Ω–≥ —Å–∞–ª–æ–Ω–∞"
        
        2. **–†–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏ –Ω–∞–≤–µ—Å–Ω–æ–≥–æ**
           - "–î–≤–∏–≥–∞—Ç–µ–ª—å —Ç—Ä–æ–∏—Ç –∏ –ø–ª–æ—Ö–æ –∑–∞–≤–æ–¥–∏—Ç—Å—è"
           - "–°—Ç—É–∫ –≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ –ø—Ä–∏ —É—Å–∫–æ—Ä–µ–Ω–∏–∏"
        
        3. **–ê–≤—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏–∫–∏/–∫–æ–º–ø—å—é—Ç.–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞**
           - "–ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Ñ–∞—Ä—ã –∏ –±–æ—Ä—Ç–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä"
           - "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è –∑–∞ –Ω–æ—á—å"
        
        4. **–†–µ–º–æ–Ω—Ç —Ö–æ–¥–æ–≤–æ–π/–ø–æ–¥–≤–µ—Å–∫–∏/–≥–µ–æ–º–µ—Ç—Ä–∏—è**
           - "–°—Ç—É–∫ –≤ –ø–æ–¥–≤–µ—Å–∫–µ –ø—Ä–∏ –ø—Ä–æ–µ–∑–¥–µ –Ω–µ—Ä–æ–≤–Ω–æ—Å—Ç–µ–π"
           - "–ú–∞—à–∏–Ω—É –≤–µ–¥–µ—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏"
        
        5. **–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –∏ –∂–∏–¥–∫–æ—Å—Ç–µ–π**
           - "–ù—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–∞—Å–ª–æ –∏ —Ñ–∏–ª—å—Ç—Ä—ã"
           - "–•–æ—á—É –∑–∞–º–µ–Ω–∏—Ç—å –∞–Ω—Ç–∏—Ñ—Ä–∏–∑ –∏ —Ç–æ—Ä–º–æ–∑–Ω—É—é –∂–∏–¥–∫–æ—Å—Ç—å"
        """)
        
    # About the application
    st.sidebar.header("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    st.sidebar.info("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.
    
    –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–º–æ–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∫ –Ω—É–∂–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.
    """)

if __name__ == "__main__":
    main()